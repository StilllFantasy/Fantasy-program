void dfs (int x,int f)
{
    far[x][0]=f;
    for(int i=1;i<=17;i++)
    far[x][i]=far[far[x][i-1]][i-1];
}
int lca (int a,int b)
{
    if(dep[a]<dep[b])
    swap(a,b);
    for(int i=17;i>=0;i--)
    if(dep[y]<=dep[far[x][i]])
    x=far[x][i];
    if(x==y)
    return x;
    for(int i=17;i>=0;i--)
    {
        if(far[x][i]!=far[y][i])
        {
            x=far[x][i];
            y=far[y][i];
        }
    }
    return far[x][0];
}
void tar(int x)
{
    dfn[x]=low[x]=++tim;
    s.push(x);
    vis[x]=1;
    for(int i=0;i<G[x].size();i++)
    {
        int v=G[x][i];
        if(!dfn[v])
        {
            tar(v);
            low[u]=min(low[u],low[v]);
        }
        else if(vis[v])
        low[u]=min(dfn[v],low[u]);
    }
    if(low[u]==dfn[u])
    {
        scc++;
        do
        {
            int v=s.top();
            s.pop();
            vis[s]=0;
            pot[v]=scc;
        }while(u!=v);
    }
}